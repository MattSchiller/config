" 
" File: .vimrc
" Author: Zack Fleischman
"

" Remap leader to the space bar. Do this before sourcing any mappings
let mapleader="\<Space>"

" Plugins 
source ~/.vimplugins
au BufReadPost .vimplugins set syntax=sh

autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

colorscheme wombat256mod

" ===========================
" KEY MAPPINGS
" ===========================

" So we don't have to reach for escape to leave insert mode.
inoremap jk <esc>

" Enter key goes to the end. Useful for line navigation. Enter the line # then
" press Enter
nnoremap <CR> G
nnoremap <leader><CR> <CR>

" Switch mark jumpers
nnoremap ' `
nnoremap ` '

" Switch go to beginning of line / end of whitespace
nnoremap 0 ^
nnoremap ^ 0

" Remove trailing whitespace
nnoremap <leader>W :%s/\s\+$//<CR>

" Navigate back a file
noremap <leader>` <C-^>

" Folding
nnoremap <leader>o @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <leader>o zf
" Unfold everything on window open
:autocmd BufWinEnter * let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)'))


"""""""""""""
" Tab Control
"""""""""""""
" Goto Last Tab
let g:lasttab = tabpagenr()
au TabLeave * let g:lasttab = tabpagenr()
noremap <leader><TAB> :exe "tabn ".g:lasttab<CR>

" Go left and right tabs and go directly to tab
noremap <C-h> gT
noremap <C-l> gt

noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt
noremap <leader>7 7gt
noremap <leader>8 8gt
noremap <leader>9 9gt

" Open current split into new tab
noremap <C-n> <C-w>T

" Move tabs around
function! ShiftTabRight()
    let currTabNum = tabpagenr()
    let maxTabNum = tabpagenr('$')
    if currTabNum == maxTabNum
        exe "tabm 0"
    else
        exe "tabm ".currTabNum
    endif
endfunction
function! ShiftTabLeft()
    let currTabNum = tabpagenr()
    let maxTabNum = tabpagenr('$')
    let next = currTabNum-2
    if currTabNum == 1
        exe "tabm ".maxTabNum
    else
        exe "tabm ".next
    endif
endfunction
nnoremap <silent> < :call ShiftTabLeft()<CR>
nnoremap <silent> > :call ShiftTabRight()<CR>


""""""""
" Paste
""""""""
nnoremap <leader>P :set paste<CR>
nnoremap <leader>O :set nopaste<CR>

""""""""
" Splits
""""""""
" Bindings for easy split nav (Control and Command)
nnoremap <leader>h <C-w>h
nnoremap <leader>j <C-w>j
nnoremap <leader>k <C-w>k
nnoremap <leader>l <C-w>l

" Pane resizing
nnoremap <silent> - :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> = :exe "resize " . (winheight(0) * 2/3)<CR>
nnoremap <silent> _ :exe "vertical resize " . (winwidth(0) * 3/2)<CR>
nnoremap <silent> + :exe "vertical resize " . (winwidth(0) * 2/3)<CR>
nnoremap <leader>- :res +5<CR>
nnoremap <leader>= :res -5<CR>
nnoremap <leader>] :vertical resize +5<CR>
nnoremap <leader>[ :vertical resize -5<CR>

" Split Panes
noremap <leader>v <C-w>v<C-w>l    " create new vsplit, and switch to it.
noremap <leader>s <C-w>s<C-w>j    " create new hsplit, and switch to it.

" Saving and Quiting
noremap <leader>w :w<CR>    " Save
noremap <leader>e :wq<CR>   " Save and quit
noremap <leader>q :q!<CR>   " Force Quit
noremap <leader>Q :qa!<CR>   " Force Quit All

" Undo
noremap <leader>u <C-r>     " Undo

" Modify .vimrc
noremap <leader>t :vsplit<CR>:e ~/.vimrc<CR>           " Edit .vimrc
noremap <leader>T :source ~/.vimrc<CR>      " Apply .vimrc

" Turns off search highlight
noremap <leader>; :nohlsearch<CR>

" Tabs
map <F6> :tabedit 
map <F8> :tabn<CR>  " Next Tab
map <F7> :tabp<CR>  " Previous Tab

" Replace text
noremap <leader>R :%s//g<left><left>

" Goto mark
noremap gm m

" Format whole file
map <leader>+ gmzgg=G`z

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
" Remember info about open buffers on close
set viminfo^=%

"====================
" Settings
"====================

" Syntax highlighting
syntax on   

" Show line numbers
set number  

" Disable errorbells
set visualbell
set t_vb=

" History Count
set history=1000
set undolevels=1000

" Visual Menu for file completion
set wildmenu
set wildmode=list:longest

" Tabs and Indents
set tabstop=4
set shiftwidth=4
set softtabstop=4
set backspace=2
set expandtab   " use spaces instead of tabs.
set smarttab    " let's tab key insert 'tab stops', and bksp deletes tabs.
set shiftround  " tab / shifting moves to closest tabstop.
set autoindent  " Match indents on new lines.
set smartindent " Intellegently dedent / indent new lines based on rules.

" Show Whitespace
nmap <leader>\ :set list!<CR>
set list
set listchars=eol:¬,tab:▸\ ,trail:·,nbsp:⎵

" We have VCS -- we don't need this stuff.
set nobackup " We have vcs, we don't need backups.
set nowritebackup " We have vcs, we don't need backups.
set noswapfile " They're just annoying. Who likes them?

" Don't nag me when hiding buffers
set hidden " allow me to have buffers with unsaved changes.
set autoread " when a file has changed on disk, just load it. Don't ask.

" Make search more sane
set ignorecase  " case insensitive search
set smartcase   " If there are uppercase letters, become case-sensitive.
set incsearch   " live incremental searching
set showmatch   " live match highlighting
set hlsearch    " highlight matches
set gdefault    " use the `g` flag by default.

" Set Color Mode
set t_Co=256

" Allow the cursor to go anywhere in visual block mode.
set virtualedit+=block

" Set relative line numbers in visual mode
:nnoremap <silent> v :<C-u>set nonu rnu<CR>v
:nnoremap <silent> V :<C-u>set nonu rnu<CR>V
:nnoremap <silent> <C-v> :<C-u>set nu rnu<CR><C-v>
:nnoremap <silent> gv :<C-u>set nu rnu<CR>gv
vnoremap <Esc> <Esc>:set nu<CR>
:autocmd CursorMoved * if mode() !~# "[vV\<C-v>]" | set nu | endif

function! NumberToggle()
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunc
nnoremap <C-q> :call NumberToggle()<cr>


" Diff Color Scheme
if &diff
    colorscheme diffColorScheme
    noremap <leader>q :qa!<CR>   " Force Quit All
endif


" Set Tab Labels
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')

            let s .= '%#TabNum#'
            let s .= i
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s.= ' ' . file . ' '
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
        return s
    endfunction
    set stal=2
    set tabline=%!MyTabLine()
    set showtabline=1
    highlight link TabNum Special
endif


"=========================================
" PLUGIN MAPPINGS
" ========================================

" Vundle
noremap <leader>al :PluginList<CR>      " pulls up plugins
noremap <leader>ai :PluginInstall<CR>      " installs plugins
noremap <leader>ac :PluginClean<CR>      " cleans plugins
noremap <leader>as :PluginSearch!<CR>      " searches plugins

" Rainbow Parens
let g:rainbow_active = 1

" NERD Tree
function! NERDTreeQuit()
    redir => buffersoutput
    silent buffers
    redir END
    "   1BufNo  2Mods.     3File           4LineNo
    let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
    let windowfound = 0

    for bline in split(buffersoutput, "\n")
        let m = matchlist(bline, pattern)

        if (len(m) > 0)
            if (m[2] =~ '..a..')
                let windowfound = 1
            endif
        endif
    endfor

    if (!windowfound)
        quitall
    endif
endfunction
autocmd WinEnter * call NERDTreeQuit()
noremap <leader>i :NERDTreeToggle<CR>
let g:NERDTreeQuitOnOpen = 1

" Airline
set laststatus=2
let g:airline_theme="badwolf"
let g:airline#extensions#whitespace#enabled=0

" Sneak
let g:sneak#streak = 1
let g:sneak#s_next = 1
nmap s H<Plug>Sneak_s
nmap S L<Plug>Sneak_S
let g:sneak#use_ic_scs = 1

" Tagbar
nmap <leader>p :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" Syntastic
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" Jedi
"let g:jedi#use_splits_not_buffers = "top"
let g:jedi#use_tabs_not_buffers = 1

" Supertab
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SuperTabContextDefaultCompletionType = "<c-n>"

" Reprocessed
let g:reprocessed_map_keys = 0
"nnoremap <leader>1 :RunCurrentSketch<cr>
"nnoremap <leader>2 :PresentCurrentSketch<cr>

" Ag
noremap <leader>x :Ag <cword> ~/repos/website/counsyl/product<CR>
noremap <leader>X : ~/repos/website/counsyl/product<C-b>Ag 

" Ctrl-P
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_by_filename = 0
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_max_height = 40
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': [';'],
  \ 'AcceptSelection("t")': ['<cr>', '<c-m>'],
  \ 'AcceptSelection("v")': ["'", '<c-v>'],
  \ }
let g:ctrlp_user_command = 'ag %s -l --nocolor --hidden -g ""'
noremap <leader>f :CtrlP<CR>
noremap <leader>b :CtrlPBuffer<CR>
noremap <leader>m :CtrlPMRU<CR>

" Color Column at 80 chars
set textwidth=79
set colorcolumn=+1
let &colorcolumn=join(range(80,999),",")
highlight ColorColumn ctermbg=235

" Cursor Line
set cursorline
hi CursorLine cterm=None ctermbg=237
