" 
" File: .vimrc
" Author: Zack Fleischman
"

" Remap leader to the space bar. Do this before sourcing any mappings
let mapleader="\<Space>"

" Plugins 
source ~/.vimplugins

" ===========================
" KEY MAPPINGS
" ===========================

" So we don't have to reach for escape to leave insert mode.
inoremap jk <esc>

" Enter key goes to the end. Useful for line navigation. Enter the line # then
" press Enter
nnoremap <CR> G

" Switch mark jumpers
nnoremap ' `
nnoremap ` '

" Switch go to beginning of line / end of whitespace
nnoremap 0 ^
nnoremap ^ 0

" Bindings for easy split nav
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" LEADER MAPPINGS
" ---------------

" Split Panes
noremap <leader>v <C-w>v    " create new vsplit, and switch to it.
noremap <leader>s <C-w>s    " create new hsplit, and switch to it.

" Saving and Quiting
noremap <leader>w :w<CR>    " Save
noremap <leader>e :wq<CR>   " Save and quit
noremap Q :q<CR>            " Quit
noremap <leader>Q :q<CR>    " Quit
noremap q :q!<CR>           " Force Quit
noremap <leader>q :q!<CR>   " Force Quit

" Undo
noremap <leader>u <C-r>     " Undo

" Modify .vimrc
noremap <leader>t :vsplit<CR>:e ~/.vimrc<CR>           " Edit .vimrc
noremap <leader>T :source ~/.vimrc<CR>      " Apply .vimrc

" Turns off search highlight
noremap <leader><F5> :nohlsearch<CR>     

" Delete line
noremap <leader>d ^d$

" Tabs
map <F6> :tabedit 
map <F8> :tabn<CR>  " Next Tab
map <F7> :tabp<CR>  " Previous Tab

" Replace text
noremap <leader>r :%s//g<left><left>
noremap <leader>R :%s//gc<left><left><left>

" Goto mark
noremap gm m

" Format whole file
map <leader>= gmzgg=G`z

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

"====================
" Settings
"====================

" Syntax highlighting
syntax on   

" Show line numbers
set number  

" Disable errorbells
set visualbell
set t_vb=

" History Count
set history=1000
set undolevels=1000

" Visual Menu for file completion
set wildmenu
set wildmode=list:longest

" Tabs and Indents
set tabstop=4
set shiftwidth=4
set softtabstop=4
set backspace=2
set expandtab   " use spaces instead of tabs.
set smarttab    " let's tab key insert 'tab stops', and bksp deletes tabs.
set shiftround  " tab / shifting moves to closest tabstop.
set autoindent  " Match indents on new lines.
set smartindent " Intellegently dedent / indent new lines based on rules.

" We have VCS -- we don't need this stuff.
set nobackup " We have vcs, we don't need backups.
set nowritebackup " We have vcs, we don't need backups.
set noswapfile " They're just annoying. Who likes them?

" Don't nag me when hiding buffers
set hidden " allow me to have buffers with unsaved changes.
set autoread " when a file has changed on disk, just load it. Don't ask.

" Make search more sane
set ignorecase  " case insensitive search
set smartcase   " If there are uppercase letters, become case-sensitive.
set incsearch   " live incremental searching
set showmatch   " live match highlighting
set hlsearch    " highlight matches
set gdefault    " use the `g` flag by default.

" Set Color Mode
set t_Co=256

" Allow the cursor to go anywhere in visual block mode.
set virtualedit+=block

"=========================================
" PLUGIN MAPPINGS
" ========================================

" Vundle
noremap <leader>al :PluginList<CR>      " pulls up plugins
noremap <leader>ai :PluginInstall<CR>      " installs plugins
noremap <leader>ac :PluginClean<CR>      " cleans plugins
noremap <leader>as :PluginSearch!<CR>      " searches plugins

" Rainbow Parens
let g:rainbow_active = 1

" Easy Motion 
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map  n <Plug>(easymotion-next)
map  N <Plug>(easymotion-prev)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s)
nmap S <Plug>(easymotion-bd-w)

" Ctrl-P
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
map <leader>f :CtrlP<CR>

" NERD Tree
map <C-o> :NERDTreeToggle<CR>
function! NERDTreeQuit()
    redir => buffersoutput
    silent buffers
    redir END
    "   1BufNo  2Mods.     3File           4LineNo
    let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
    let windowfound = 0

    for bline in split(buffersoutput, "\n")
        let m = matchlist(bline, pattern)

        if (len(m) > 0)
            if (m[2] =~ '..a..')
                let windowfound = 1
            endif
        endif
    endfor

    if (!windowfound)
        quitall
    endif
endfunction
autocmd WinEnter * call NERDTreeQuit()
noremap <leader>o :NERDTreeToggle<CR>

" Airline
set laststatus=2
let g:airline_theme="badwolf"

" Ag
noremap <leader>D : ~/repos/wonderdome<C-b>Ag 
noremap <leader>d :Ag 
